<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://qianmianyao.cn</id>
    <title>千面妖的网络日志</title>
    <updated>2021-07-13T00:39:11.786Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://qianmianyao.cn"/>
    <link rel="self" href="https://qianmianyao.cn/atom.xml"/>
    <subtitle>&lt;script src=&quot;https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto&quot; defer&gt;&lt;/script&gt;
&lt;span id=&quot;hitokoto&quot;&gt;</subtitle>
    <logo>https://qianmianyao.cn/images/avatar.png</logo>
    <icon>https://qianmianyao.cn/favicon.ico</icon>
    <rights>All rights reserved 2021, 千面妖的网络日志</rights>
    <entry>
        <title type="html"><![CDATA[优化Linux中rm的删除逻辑]]></title>
        <id>https://qianmianyao.cn/post/python_rm/</id>
        <link href="https://qianmianyao.cn/post/python_rm/">
        </link>
        <updated>2021-07-12T04:01:52.000Z</updated>
        <content type="html"><![CDATA[<p>在腾讯开发者中心刷帖的时候发现了这么一个帖子“使用shell脚本来优化rm的删除逻辑”，配图如下<br>
<img src="https://ftp.bmp.ovh/imgs/2021/07/5704ff271731fb16.png" alt="图片来源于腾讯社区" loading="lazy"><br>
我想起每次无意中使用<code>rm -rf</code>来删除当时以为不重要的文件，之后又要重新下载的蛋疼时刻，虽然有人推荐用<code>alias rm=mv</code>来代替rm，但是使用体验并非那么美好，看到这个帖子后，很感兴趣就打算用shell来写一个。<br>
但是，几年没有使用过shell了，语法也忘光了，写起来磕磕碰碰，正好我现在在学python，正好使用python来实现</p>
<p><strong>脚本如下：</strong></p>
<pre><code class="language-python">import os
import sys
import shutil

# 取传入参数的1-n个参数
list_file = sys.argv[1:]


def rm_optimeize():
    for file_source in list_file:
        file_ta = os.path.exists(file_source)
        file_size = os.path.getsize(file_source)
        if file_ta and file_size &gt; 102400:
            ask = input(&quot;文件大于1G，是否删除[yes/no]&quot;)
            if ask == &quot;yes&quot;:
                os.remove(file_source)
            else:
                shutil.move(file_source, &quot;/tmp&quot;)
        elif file_ta and file_size &lt; 102400:
            shutil.move(file_source, &quot;/tmp&quot;)
            print(&quot;文件已放入/tmp回收站&quot;)    
        elif not file_ta:
            continue

# 兼容linux中&quot;./*&quot;语法
if sys.argv[1] == &quot;./*&quot;:
    rm_optimeize()
else:
    rm_optimeize()
</code></pre>
<p>脚本的整体逻辑很简单，就是图上的逻辑</p>
<ol>
<li>首先获取外部传入的参数，如文件名</li>
<li>获取到参数后存到变量中，变量是一个列表，所以可以存放多个参数</li>
<li>使用fro循环来遍历参数，进行判断，比如文件是否存在，文件大小判断，然后进行处理</li>
<li>为了兼容<code>rm -rf ./*</code>语法，启动脚本后会先进行一个字符串的判断</li>
</ol>
<p>上面的脚本可以直接拿来用，本次练习到此结束</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Debian更新内核]]></title>
        <id>https://qianmianyao.cn/post/debian-geng-xin-nei-he/</id>
        <link href="https://qianmianyao.cn/post/debian-geng-xin-nei-he/">
        </link>
        <updated>2021-06-18T13:04:11.000Z</updated>
        <summary type="html"><![CDATA[<p>体验新内核新特性</p>
]]></summary>
        <content type="html"><![CDATA[<p>体验新内核新特性</p>
<!-- more -->
<h2 id="debian">Debian</h2>
<p>使用<code>uname -a</code>查看内核，输出如下</p>
<pre><code class="language-bash">Linux VM-8-12-debian 4.19.0-11-amd64 #1 SMP Debian 4.19.146-1 (2020-09-17) x86_64 GNU/Linux
</code></pre>
<h3 id="编译安装内核">编译安装内核</h3>
<p>首先去<a href="https://www.kernel.org/?ivk_sa=1024320u">官网</a>或者国内<a href="https://mirror.bjtu.edu.cn/kernel/linux/kernel/v5.x/">镜像站</a>下载需要的内核版本</p>
<ul>
<li>解压且进入解压包</li>
<li>使用<code>make menuconfig</code>来进行配置</li>
</ul>
<p>按照提示安装所需要的依赖即可</p>
<ul>
<li>修改生成的<code>.config</code>文件，编辑<code>CONFIG_SYSTEM_TRUSTED_KEYS=&quot;&quot;</code>使其为空</li>
<li>禁用签名</li>
</ul>
<pre><code class="language-bash">scripts/config --disable MODULE_SIG
scripts/config --disable DEBUG_INFO
</code></pre>
<ul>
<li>使用<code>make deb-pkg</code>生成deb包</li>
</ul>
<p>使用<code>- j</code>选项可以调用更多核心，比如<code>make -j 8 deb-pkg</code></p>
<ul>
<li>编译完毕后会在所在文件夹的根目录出现3个编译完成的deb文件，直接安装重启即可</li>
</ul>
<h3 id="卸载旧内核">卸载旧内核</h3>
<p>使用<code>dpkg --list | grep linux-image</code> 来查看安装的所有内核</p>
<p>debina中内核的包名是<code>linux-images</code>，redhat中包名<code>kernel</code></p>
<ul>
<li>卸载内核需要删除内核文件和头部文件</li>
</ul>
<pre><code class="language-jsx">$ apt purge linux-image-version
$ apt purge linux-headers-version
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用WARP进行流媒体解锁]]></title>
        <id>https://qianmianyao.cn/post/warp/</id>
        <link href="https://qianmianyao.cn/post/warp/">
        </link>
        <updated>2021-05-26T10:51:55.000Z</updated>
        <summary type="html"><![CDATA[<p>逛Github的时候看推荐发现了这个项目，结果就是一晚上没睡，并且付出了63元的测试结果下，决定水一篇文章</p>
]]></summary>
        <content type="html"><![CDATA[<p>逛Github的时候看推荐发现了这个项目，结果就是一晚上没睡，并且付出了63元的测试结果下，决定水一篇文章</p>
<!-- more -->
<p>Warp是CloudFlare推出的一个VPN服务，目的在于加密流量和IP，实现匿名访问，具体信息可以参考官方的博文👉<a href="https://blog.cloudflare.com/zh-cn/announcing-warp-plus-zh-cn/">Introducing WARP: Fixing Mobile Internet Performance and Security</a></p>
<p>手动配置其实也不难，为了更方便这里当然推荐使用一键脚本</p>
<p><a href="https://github.com/missuo/CloudflareWarp">missuo/CloudflareWarp</a></p>
<h3 id="开始">开始</h3>
<p>首先确保你的VPS内核版本≥5.X，如果不符合要请先更新内核，这里使用Debian10作为演示</p>
<p>1.添加源，打开 <code>/etc/apt/source.list</code> 在尾部添加如下内容</p>
<pre><code class="language-json">deb https://deb.debian.org/debian buster-backports main
</code></pre>
<p>2.安装内核后重新启动</p>
<pre><code class="language-bash">apt install -t buster-backports linux-image-cloud-amd64 linux-headers-cloud-amd64 &amp;&amp; reboot
</code></pre>
<p>3.内核安装完毕后执行一键脚本</p>
<pre><code class="language-bash">wget -O warp.sh https://raw.githubusercontent.com/missuo/CloudflareWarp/main/warp.sh &amp;&amp; bash warp.sh
</code></pre>
<p>4.脚本执行完毕后会出现如下选项，选择4，增加IPV6，等待执行完毕即可</p>
<figure data-type="image" tabindex="1"><a href="https://imgtu.com/i/2jpAyt"><img src="https://z3.ax1x.com/2021/06/16/2jpAyt.png" alt="2jpAyt.png" loading="lazy"></a></figure>
<p>5.ipv6测试，输入 <code>curl ipv6.ip.sb</code> 返回结果应该是你的ipv6地址</p>
<p>6.netflix测试，执行如下脚本，如下图则证明解锁成功</p>
<pre><code class="language-bash">wget -O nf https://cdn.jsdelivr.net/gh/sjlleo/netflix-verify/CDNRelease/nf_2.60_linux_amd64 &amp;&amp; chmod +x nf &amp;&amp; clear &amp;&amp; ./nf
</code></pre>
<figure data-type="image" tabindex="2"><a href="https://imgtu.com/i/2jpZef"><img src="https://z3.ax1x.com/2021/06/16/2jpZef.png" alt="2jpZef.png" loading="lazy"></a></figure>
<p>7.由于仅解锁ipv6，我们需要让路由优先使用ipv6，验证优先级可以使用 <code>curl ip.p3terx.com</code> 来测试，输出的是ipv4就说明你现在是ipv4优先，反之亦然。修改 <code>/etc/gai.conf</code> 在最后一行添加下面的代码</p>
<pre><code class="language-bash">precedence ::ffff:0:0/96 100
</code></pre>
<p>关于代理工具的ipv6优先，请参考如下这篇博客👉<a href="https://loukky.com/archives/1507?__cf_chl_jschl_tk__=ad63295e7e916843957f5f94727b8ecf4b15ddc3-1621981917-0-AYTeutMNxpDydZRNs7P_LQIkqwx_ksRC7zIyTtEZXTtudJ8Yflb0L7qDiL5Jprux30izkMyf_AyoEVjyMMpVj4AcTVGx7LF2WQcV4zLGYLiD1Je_4gqTPuiw7EyrJTQ1IEGc2p-xeg_06Gv69ikZ9EZyoiY9wdsWPzJneGbxdGGvJ7TRiCtcoOTvc6fppGJNrLfqGLc0yStntnuAWGrm76ZVy4vK3rE9OUmRA43-vFEVlducGbowUZrgjFqUBgxr0YWDumUAVdkYo_0tx8dcu1GpC3lzibVSrcNG1ql4sYixfOa6pdlNK-lTlHylGvlKACVScAlluhAVfB6lJewDu5CCRAwXJiyUN4EeLuB8zd3tk5MKtfyfQo1GyQUMgD13hpcQQLeC5liLur5U78LTC2auz0SHgVIt4SRwsStuV5H60jK3RQMDf0VDbkKBqcAcHWuO7zcm5178VGrDuQ-sz4FKxRbOSm8O14k6y6VswTt7">IPV6优先</a></p>
<p>现在，就可以愉快的观看Netflix啦</p>
<figure data-type="image" tabindex="3"><a href="https://imgtu.com/i/2jpew8"><img src="https://z3.ax1x.com/2021/06/16/2jpew8.png" alt="2jpew8.png" loading="lazy"></a></figure>
<h3 id="结语">结语</h3>
<p>偷偷用speedtest来测一下Warp的速度</p>
<p><a href="https://imgtu.com/i/2jpEOP"><img src="https://z3.ax1x.com/2021/06/16/2jpEOP.png" alt="2jpEOP.png" loading="lazy"></a><br>
由于我并没有奈菲的账号，为了测试是否成功，去买了一个账号，有效期两个月，结果无法登录。</p>
<p>反馈过去告诉我是代理的问题，实在是想知道结果，又花钱买了一个月的代理，结果还是打不开。</p>
<p>无奈之下，google了一下看看有没有便宜的月抛账号，结果找到了3.5元/月的5日抛，tmd，怪自己没提前去找这种账号，最后的结果就是，<code>代理=22/月</code>、<code>账号20/月x2</code>，一共损失62元。</p>
<p>所以，千万要早睡</p>
<p>END</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[搭建KMS在线激活服务器]]></title>
        <id>https://qianmianyao.cn/post/kms/</id>
        <link href="https://qianmianyao.cn/post/kms/">
        </link>
        <updated>2021-05-16T06:02:00.000Z</updated>
        <summary type="html"><![CDATA[<p>对比其他版本的kms，更方便了，可以180天后自动续期，搭建方便，无需配置，搭建完毕后仅需要一个简单的bat脚本就可以激活系统</p>
]]></summary>
        <content type="html"><![CDATA[<p>对比其他版本的kms，更方便了，可以180天后自动续期，搭建方便，无需配置，搭建完毕后仅需要一个简单的bat脚本就可以激活系统</p>
<!-- more -->
<h3 id="安装">安装</h3>
<p>1.首先去github发布页面下载安装包</p>
<pre><code class="language-bash">wget https://github.com/Wind4/vlmcsd/releases/download/svn1113/binaries.tar.gz
</code></pre>
<p>2.解压并进入文件夹，确认你的cpu是什么架构，找到linux的可执行文件</p>
<pre><code class="language-bash">cd binaries/Linux/intel/static/
./vlmcsd-x64-musl-static
#直接运行即可
ss -tlp | grep vlmcs
#查看端口，应该是1688
</code></pre>
<p>3.在windows上编辑一个 <code>kms.bat</code> 文件，写入如下内容</p>
<pre><code class="language-powershell">slmgr /skms ip:1688
#填入你的ip和端口
slmgr /ato
slmgr /xpr
</code></pre>
<p>4.右键 <code>kms.bat</code> 文件，选择以管理员身份运行，一路按确定即可</p>
<p><a href="https://github.com/Wind4/vlmcsd">Wind4/vlmcsd</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bash命令补全]]></title>
        <id>https://qianmianyao.cn/post/bash-ming-ling-bu-quan/</id>
        <link href="https://qianmianyao.cn/post/bash-ming-ling-bu-quan/">
        </link>
        <updated>2021-05-12T06:04:33.000Z</updated>
        <summary type="html"><![CDATA[<p>总是会忘记一些不怎么常用的命令，今天在github逛街的时候发现了bash的一款命令补全工具，十分好用</p>
]]></summary>
        <content type="html"><![CDATA[<p>总是会忘记一些不怎么常用的命令，今天在github逛街的时候发现了bash的一款命令补全工具，十分好用</p>
<!-- more -->
<p><a href="https://github.com/scop/bash-completion">scop/bash-completion</a></p>
<h3 id="安装">安装</h3>
<p>1.下载bash_completion源码并且解压</p>
<pre><code class="language-bash">wget https://github.com/scop/bash-completion/releases/download/2.11/bash-completion-2.11.tar.xz
tar -xf bash-completion-2.11.tar.xz
</code></pre>
<p>2.编译安装</p>
<pre><code class="language-bash">cd bash-completion*
./confgure
make &amp;&amp; make install
</code></pre>
<p>3.编译完毕后底部会出现如下信息，比如 <code>/usr/local/share/bash-completion/bash_completion</code> 就是编译完毕后的安装地址，等会需要用</p>
<pre><code class="language-bash">***********
make  install-data-hook
make[3]: Entering directory '/root/bash-completion-2.11'
tmpfile=`mktemp ${TMPDIR:-/tmp}/bash_completion.XXXXXX` &amp;&amp; \
/bin/sed -e 's|-/etc/bash_completion\.d|-/usr/local/etc/bash_completion.d|' \
    /usr/local/share/bash-completion/bash_completion &gt;$tmpfile &amp;&amp; \
cat $tmpfile &gt;/usr/local/share/bash-completion/bash_completion &amp;&amp; \
rm $tmpfile
make[3]: Leaving directory '/root/bash-completion-2.11'
make[2]: Leaving directory '/root/bash-completion-2.11'
make[1]: Leaving directory '/root/bash-completion-2.11'
</code></pre>
<p>4.修改 <code>.bashrc</code> 文件，在底部添加如下信息，吧path改成你刚才安装完毕的地址</p>
<pre><code class="language-bash">[[ $PS1 &amp;&amp; -f /path ]] &amp;&amp; \
    . /path
</code></pre>
<p>5.现在输入命令后，按tab建即可</p>
<!-- more -->
<h3 id="结语">结语</h3>
<p>其实zsh和fish都有很多补全插件，但是在服务器上装这两个东西感觉别扭，也比较麻烦，就找到了支持bash的工具，说实话体验很不错，省去了不记得命令然后去google的时间，大大提升效率</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[File Browser一个简单的网盘程序]]></title>
        <id>https://qianmianyao.cn/post/29/</id>
        <link href="https://qianmianyao.cn/post/29/">
        </link>
        <updated>2020-06-11T15:02:49.000Z</updated>
        <summary type="html"><![CDATA[<p>使用nginx和程序本体或者docker搭建一个简易的网盘。</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用nginx和程序本体或者docker搭建一个简易的网盘。</p>
<!-- more -->
<p>File Browser是什么，请移步官方网站：<a href="https://filebrowser.xyz/">https://filebrowser.xyz</a></p>
<p>也可以用：<a href="https://qianmianyao.cn/28">https://qianmianyao.cn/28</a></p>
<h2 id="nginx">Nginx</h2>
<p>拿centos来演示<br>
先安装nginx</p>
<pre><code class="language-bash">yum install nginx -y
</code></pre>
<p>安装flie browser</p>
<pre><code class="language-bash">curl -fsSL https://filebrowser.org/get.sh | bash
</code></pre>
<p>启动flie browser并且让它在后台运行</p>
<pre><code class="language-bash">filebrowser -r /path/to/your/files &amp;
# -r 后面设置你要存放文件的路径
</code></pre>
<p>启动完毕后默认的端口是8080，当然现在是访问不了的，我们再来设置nginx</p>
<p>编辑nginx配置文件</p>
<pre><code class="language-json">server {
	listen 80;
	server_name localhost;
	location / {
		proxy_pass http://127.0.0.1:8080;
	}
}
//绑定自己的域名可以将localhost字段改成自己的域名
</code></pre>
<p>到这里就设置完毕，我们访问你的vps的IP就可以看到部署完毕的程序了</p>
<p>后台的帐号和密码</p>
<ul>
<li>Username: admin</li>
<li>Password: admin</li>
</ul>
<h2 id="docker安装filebrowser">docker安装filebrowser</h2>
<p>首先直接使用docker官方的一键脚本安装好docker</p>
<pre><code class="language-bash">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
</code></pre>
<p>获取镜像</p>
<pre><code class="language-bash">docker pull filebrowser/filebrowser
</code></pre>
<p>开始配置</p>
<pre><code class="language-bash">mkdir ./filebrowser
#建立目录
touch filebrowser.db
#建立数据库文件
vim .filebrowser.json
#写入配置
</code></pre>
<p>写入如下配置</p>
<pre><code class="language-json">{
  &quot;port&quot;: 80,
  &quot;baseURL&quot;: &quot;&quot;,
  &quot;address&quot;: &quot;&quot;,
  &quot;log&quot;: &quot;stdout&quot;,
  &quot;database&quot;: &quot;./database.db&quot;,
  &quot;root&quot;: &quot;/srv&quot;
}
</code></pre>
<p>运行程序</p>
<pre><code class="language-bash">docker run \\
    -v /root/filebrowser:/srv \\
    -v /root/filebrowser/filebrowser.db:/database.db \\
    -v /root/filebrowser/.filebrowser.json:/.filebrowser.json \\
    -p 80:80 \\
    filebrowser/filebrowser
</code></pre>
<p>打开你的http://你的ip:80既可以访问程序啦</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Certbot自动配置SSL]]></title>
        <id>https://qianmianyao.cn/post/28/</id>
        <link href="https://qianmianyao.cn/post/28/">
        </link>
        <updated>2020-06-10T14:51:13.000Z</updated>
        <summary type="html"><![CDATA[<p>Let’s Encrypt 是一个自动签发 https 证书的免费项目<br>
Certbot 是 Let’s Encrypt 官方推荐的证书生成客户端工具</p>
]]></summary>
        <content type="html"><![CDATA[<p>Let’s Encrypt 是一个自动签发 https 证书的免费项目<br>
Certbot 是 Let’s Encrypt 官方推荐的证书生成客户端工具</p>
<!-- more -->
<p>首先去官网 <a href="https://certbot.eff.org/">certbot</a></p>
<figure data-type="image" tabindex="1"><a href="https://imgtu.com/i/2jS7i4"><img src="https://z3.ax1x.com/2021/06/16/2jS7i4.png" alt="2jS7i4.png" loading="lazy"></a></figure>
<p>箭头指向的地方选择你的web服务器和系统版本<br>
比如我常用的就是nginx和debian</p>
<p>选择好后稍等1-3秒下拉既可以看到官方的部署教程</p>
<h2 id="安装">安装</h2>
<p>安装本体和插件</p>
<pre><code class="language-bash">sudo apt-get install certbot python-certbot-nginx
</code></pre>
<p>可以选择两种方式获取证书</p>
<p>第一种获取证书并且直接自动化配置nginx文件</p>
<pre><code class="language-bash">sudo certbot --nginx
</code></pre>
<p>或者只获取证书文件</p>
<pre><code class="language-bash">sudo certbot certonly --nginx
</code></pre>
<p>其实很简单，根据简单流程输入邮箱和域名就好了</p>
<p>Certbot自动配置SSL</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Debian安装Redis]]></title>
        <id>https://qianmianyao.cn/post/debian-an-zhuang-redis/</id>
        <link href="https://qianmianyao.cn/post/debian-an-zhuang-redis/">
        </link>
        <updated>2020-06-05T14:48:40.000Z</updated>
        <summary type="html"><![CDATA[<p>本来一只用着mysql，最近折腾nodebb需要用到redis，记录一下安装过程。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本来一只用着mysql，最近折腾nodebb需要用到redis，记录一下安装过程。</p>
<!-- more -->
<h2 id="准备工作">准备工作</h2>
<p>去<a href="https://redis.io/">官网</a>下载redis源码</p>
<pre><code class="language-bash">wget http://download.redis.io/releases/redis-6.0.5.tar.gz
tar -zxf redis-6.0.5
cd redis-6.0.5
</code></pre>
<h2 id="开始安装">开始安装</h2>
<p>编译</p>
<pre><code class="language-bash">make
</code></pre>
<p>编译完成后会多出来一个src文件夹和redis.conf的配置文件</p>
<h2 id="开始运行">开始运行</h2>
<p>修改配置文件</p>
<pre><code class="language-bash">bind 127.0.0.1 //改成你服务器的ip地址。或者改成0.0.0.0
requirepass ** //设置redis密码。
daemonize yes  //以守护进程运行
</code></pre>
<p>运行</p>
<pre><code class="language-bash">cd src
redis-server /path/redis.conf //启动服务
redis-cli //进入交互界面
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网站备份脚本]]></title>
        <id>https://qianmianyao.cn/post/26/</id>
        <link href="https://qianmianyao.cn/post/26/">
        </link>
        <updated>2020-05-16T10:36:43.000Z</updated>
        <summary type="html"><![CDATA[<p>备份是通过又拍云的官方工具UPX定时上传到又拍云的对象储存中的，使用这个脚本需要先安装UPX和expect，后者用来自动登陆</p>
]]></summary>
        <content type="html"><![CDATA[<p>备份是通过又拍云的官方工具UPX定时上传到又拍云的对象储存中的，使用这个脚本需要先安装UPX和expect，后者用来自动登陆</p>
<!-- more -->
<h3 id="脚本内容">脚本内容</h3>
<p>所有send字段的passwd和user修改成自己的用户名和密码</p>
<pre><code class="language-bash">#!/usr/bin/expect -f
set timeout 30
spawn sudo tar -czPf /home/qianmianyao/qianmianyao.cn.tar.gz /home/wwwroot/qianmianyao.cn #自己修改压缩文件名
expect &quot;*user:&quot;
send &quot;passwd\\r&quot;

mysqldump -uuser -ppasswd database&gt;database.sql

set timeout 30
spawn upx login
expect &quot;ServiceName:&quot;
send &quot;user\\r&quot;
expect &quot;Operator:&quot;
send &quot;user\\r&quot;
expect &quot;Password:&quot;
send &quot;passwd&quot;

upx rm qianmianyao.cn.tar.gz #修改成自己的压缩文件名，下面一样
upx rm wp.sql
upx put qianmianyao.cn.tar.gz
upx put wp.sql
</code></pre>
<h3 id="结语">结语</h3>
<p>利用expect和upx自动登陆，然后知道上传文件，实现备份，不想用upx也可以直接用又拍云提供的ftp，实现效果也是一样的。</p>
<p><a href="https://github.com/upyun/upx">UPX</a></p>
]]></content>
    </entry>
</feed>