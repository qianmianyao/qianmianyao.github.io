<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://qianmianyao.github.io</id>
    <title>千面妖的网络日志</title>
    <updated>2021-06-16T15:05:30.998Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://qianmianyao.github.io"/>
    <link rel="self" href="https://qianmianyao.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://qianmianyao.github.io/images/avatar.png</logo>
    <icon>https://qianmianyao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 千面妖的网络日志</rights>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://qianmianyao.github.io/post/hello-gridea/</id>
        <link href="https://qianmianyao.github.io/post/hello-gridea/">
        </link>
        <updated>2021-06-15T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用WARP进行流媒体解锁]]></title>
        <id>https://qianmianyao.github.io/post/warp/</id>
        <link href="https://qianmianyao.github.io/post/warp/">
        </link>
        <updated>2021-05-26T10:51:55.000Z</updated>
        <summary type="html"><![CDATA[<p>逛Github的时候看推荐发现了这个项目，结果就是一晚上没睡，并且付出了63元的测试结果下，决定水一篇文章</p>
]]></summary>
        <content type="html"><![CDATA[<p>逛Github的时候看推荐发现了这个项目，结果就是一晚上没睡，并且付出了63元的测试结果下，决定水一篇文章</p>
<!-- more -->
<p>Warp是CloudFlare推出的一个VPN服务，目的在于加密流量和IP，实现匿名访问，具体信息可以参考官方的博文👉<a href="https://blog.cloudflare.com/zh-cn/announcing-warp-plus-zh-cn/">Introducing WARP: Fixing Mobile Internet Performance and Security</a></p>
<p>手动配置其实也不难，为了更方便这里当然推荐使用一键脚本</p>
<p><a href="https://github.com/missuo/CloudflareWarp">missuo/CloudflareWarp</a></p>
<h3 id="开始">开始</h3>
<p>首先确保你的VPS内核版本≥5.X，如果不符合要请先更新内核，这里使用Debian10作为演示</p>
<p>1.添加源，打开 <code>/etc/apt/source.list</code> 在尾部添加如下内容</p>
<pre><code class="language-json">deb https://deb.debian.org/debian buster-backports main
</code></pre>
<p>2.安装内核后重新启动</p>
<pre><code class="language-bash">apt install -t buster-backports linux-image-cloud-amd64 linux-headers-cloud-amd64 &amp;&amp; reboot
</code></pre>
<p>3.内核安装完毕后执行一键脚本</p>
<pre><code class="language-bash">wget -O warp.sh https://raw.githubusercontent.com/missuo/CloudflareWarp/main/warp.sh &amp;&amp; bash warp.sh
</code></pre>
<p>4.脚本执行完毕后会出现如下选项，选择4，增加IPV6，等待执行完毕即可</p>
<figure data-type="image" tabindex="1"><a href="https://imgtu.com/i/2jpAyt"><img src="https://z3.ax1x.com/2021/06/16/2jpAyt.png" alt="2jpAyt.png" loading="lazy"></a></figure>
<p>5.ipv6测试，输入 <code>curl ipv6.ip.sb</code> 返回结果应该是你的ipv6地址</p>
<p>6.netflix测试，执行如下脚本，如下图则证明解锁成功</p>
<pre><code class="language-bash">wget -O nf https://cdn.jsdelivr.net/gh/sjlleo/netflix-verify/CDNRelease/nf_2.60_linux_amd64 &amp;&amp; chmod +x nf &amp;&amp; clear &amp;&amp; ./nf
</code></pre>
<figure data-type="image" tabindex="2"><a href="https://imgtu.com/i/2jpZef"><img src="https://z3.ax1x.com/2021/06/16/2jpZef.png" alt="2jpZef.png" loading="lazy"></a></figure>
<p>7.由于仅解锁ipv6，我们需要让路由优先使用ipv6，验证优先级可以使用 <code>curl ip.p3terx.com</code> 来测试，输出的是ipv4就说明你现在是ipv4优先，反之亦然。修改 <code>/etc/gai.conf</code> 在最后一行添加下面的代码</p>
<pre><code class="language-bash">precedence ::ffff:0:0/96 100
</code></pre>
<p>关于代理工具的ipv6优先，请参考如下这篇博客👉<a href="https://loukky.com/archives/1507?__cf_chl_jschl_tk__=ad63295e7e916843957f5f94727b8ecf4b15ddc3-1621981917-0-AYTeutMNxpDydZRNs7P_LQIkqwx_ksRC7zIyTtEZXTtudJ8Yflb0L7qDiL5Jprux30izkMyf_AyoEVjyMMpVj4AcTVGx7LF2WQcV4zLGYLiD1Je_4gqTPuiw7EyrJTQ1IEGc2p-xeg_06Gv69ikZ9EZyoiY9wdsWPzJneGbxdGGvJ7TRiCtcoOTvc6fppGJNrLfqGLc0yStntnuAWGrm76ZVy4vK3rE9OUmRA43-vFEVlducGbowUZrgjFqUBgxr0YWDumUAVdkYo_0tx8dcu1GpC3lzibVSrcNG1ql4sYixfOa6pdlNK-lTlHylGvlKACVScAlluhAVfB6lJewDu5CCRAwXJiyUN4EeLuB8zd3tk5MKtfyfQo1GyQUMgD13hpcQQLeC5liLur5U78LTC2auz0SHgVIt4SRwsStuV5H60jK3RQMDf0VDbkKBqcAcHWuO7zcm5178VGrDuQ-sz4FKxRbOSm8O14k6y6VswTt7">IPV6优先</a></p>
<p>现在，就可以愉快的观看Netflix啦</p>
<figure data-type="image" tabindex="3"><a href="https://imgtu.com/i/2jpew8"><img src="https://z3.ax1x.com/2021/06/16/2jpew8.png" alt="2jpew8.png" loading="lazy"></a></figure>
<h3 id="结语">结语</h3>
<p>偷偷用speedtest来测一下Warp的速度</p>
<p><a href="https://imgtu.com/i/2jpEOP"><img src="https://z3.ax1x.com/2021/06/16/2jpEOP.png" alt="2jpEOP.png" loading="lazy"></a><br>
由于我并没有奈菲的账号，为了测试是否成功，去买了一个账号，有效期两个月，结果无法登录。</p>
<p>反馈过去告诉我是代理的问题，实在是想知道结果，又花钱买了一个月的代理，结果还是打不开。</p>
<p>无奈之下，google了一下看看有没有便宜的月抛账号，结果找到了3.5元/月的5日抛，tmd，怪自己没提前去找这种账号，最后的结果就是，<code>代理=22/月</code>、<code>账号20/月x2</code>，一共损失62元。</p>
<p>所以，千万要早睡</p>
<p>END</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[File Browser一个简单的网盘程序]]></title>
        <id>https://qianmianyao.github.io/post/29/</id>
        <link href="https://qianmianyao.github.io/post/29/">
        </link>
        <updated>2020-06-11T15:02:49.000Z</updated>
        <summary type="html"><![CDATA[<p>使用nginx和程序本体或者docker搭建一个简易的网盘。</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用nginx和程序本体或者docker搭建一个简易的网盘。</p>
<!-- more -->
<p>File Browser是什么，请移步官方网站：<a href="https://filebrowser.xyz/">https://filebrowser.xyz</a></p>
<p>也可以用：<a href="https://qianmianyao.cn/28">https://qianmianyao.cn/28</a></p>
<h2 id="nginx">Nginx</h2>
<p>拿centos来演示<br>
先安装nginx</p>
<pre><code class="language-bash">yum install nginx -y
</code></pre>
<p>安装flie browser</p>
<pre><code class="language-bash">curl -fsSL https://filebrowser.org/get.sh | bash
</code></pre>
<p>启动flie browser并且让它在后台运行</p>
<pre><code class="language-bash">filebrowser -r /path/to/your/files &amp;
# -r 后面设置你要存放文件的路径
</code></pre>
<p>启动完毕后默认的端口是8080，当然现在是访问不了的，我们再来设置nginx</p>
<p>编辑nginx配置文件</p>
<pre><code class="language-json">server {
	listen 80;
	server_name localhost;
	location / {
		proxy_pass http://127.0.0.1:8080;
	}
}
//绑定自己的域名可以将localhost字段改成自己的域名
</code></pre>
<p>到这里就设置完毕，我们访问你的vps的IP就可以看到部署完毕的程序了</p>
<p>后台的帐号和密码</p>
<ul>
<li>Username: admin</li>
<li>Password: admin</li>
</ul>
<h2 id="docker安装filebrowser">docker安装filebrowser</h2>
<p>首先直接使用docker官方的一键脚本安装好docker</p>
<pre><code class="language-bash">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
</code></pre>
<p>获取镜像</p>
<pre><code class="language-bash">docker pull filebrowser/filebrowser
</code></pre>
<p>开始配置</p>
<pre><code class="language-bash">mkdir ./filebrowser
#建立目录
touch filebrowser.db
#建立数据库文件
vim .filebrowser.json
#写入配置
</code></pre>
<p>写入如下配置</p>
<pre><code class="language-json">{
  &quot;port&quot;: 80,
  &quot;baseURL&quot;: &quot;&quot;,
  &quot;address&quot;: &quot;&quot;,
  &quot;log&quot;: &quot;stdout&quot;,
  &quot;database&quot;: &quot;./database.db&quot;,
  &quot;root&quot;: &quot;/srv&quot;
}
</code></pre>
<p>运行程序</p>
<pre><code class="language-bash">docker run \\
    -v /root/filebrowser:/srv \\
    -v /root/filebrowser/filebrowser.db:/database.db \\
    -v /root/filebrowser/.filebrowser.json:/.filebrowser.json \\
    -p 80:80 \\
    filebrowser/filebrowser
</code></pre>
<p>打开你的http://你的ip:80既可以访问程序啦</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Certbot自动配置SSL]]></title>
        <id>https://qianmianyao.github.io/post/28/</id>
        <link href="https://qianmianyao.github.io/post/28/">
        </link>
        <updated>2020-06-10T14:51:13.000Z</updated>
        <summary type="html"><![CDATA[<p>Let’s Encrypt 是一个自动签发 https 证书的免费项目<br>
Certbot 是 Let’s Encrypt 官方推荐的证书生成客户端工具</p>
]]></summary>
        <content type="html"><![CDATA[<p>Let’s Encrypt 是一个自动签发 https 证书的免费项目<br>
Certbot 是 Let’s Encrypt 官方推荐的证书生成客户端工具</p>
<!-- more -->
<p>首先去官网 <a href="https://certbot.eff.org/">certbot</a></p>
<figure data-type="image" tabindex="1"><a href="https://imgtu.com/i/2jS7i4"><img src="https://z3.ax1x.com/2021/06/16/2jS7i4.png" alt="2jS7i4.png" loading="lazy"></a></figure>
<p>箭头指向的地方选择你的web服务器和系统版本<br>
比如我常用的就是nginx和debian</p>
<p>选择好后稍等1-3秒下拉既可以看到官方的部署教程</p>
<h2 id="安装">安装</h2>
<p>安装本体和插件</p>
<pre><code class="language-bash">sudo apt-get install certbot python-certbot-nginx
</code></pre>
<p>可以选择两种方式获取证书</p>
<p>第一种获取证书并且直接自动化配置nginx文件</p>
<pre><code class="language-bash">sudo certbot --nginx
</code></pre>
<p>或者只获取证书文件</p>
<pre><code class="language-bash">sudo certbot certonly --nginx
</code></pre>
<p>其实很简单，根据简单流程输入邮箱和域名就好了</p>
<p>Certbot自动配置SSL</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Debian安装Redis]]></title>
        <id>https://qianmianyao.github.io/post/debian-an-zhuang-redis/</id>
        <link href="https://qianmianyao.github.io/post/debian-an-zhuang-redis/">
        </link>
        <updated>2020-06-05T14:48:40.000Z</updated>
        <summary type="html"><![CDATA[<p>本来一只用着mysql，最近折腾nodebb需要用到redis，记录一下安装过程。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本来一只用着mysql，最近折腾nodebb需要用到redis，记录一下安装过程。</p>
<!-- more -->
<h2 id="准备工作">准备工作</h2>
<p>去<a href="https://redis.io/">官网</a>下载redis源码</p>
<pre><code class="language-bash">wget http://download.redis.io/releases/redis-6.0.5.tar.gz
tar -zxf redis-6.0.5
cd redis-6.0.5
</code></pre>
<h2 id="开始安装">开始安装</h2>
<p>编译</p>
<pre><code class="language-bash">make
</code></pre>
<p>编译完成后会多出来一个src文件夹和redis.conf的配置文件</p>
<h2 id="开始运行">开始运行</h2>
<p>修改配置文件</p>
<pre><code class="language-bash">bind 127.0.0.1 //改成你服务器的ip地址。或者改成0.0.0.0
requirepass ** //设置redis密码。
daemonize yes  //以守护进程运行
</code></pre>
<p>运行</p>
<pre><code class="language-bash">cd src
redis-server /path/redis.conf //启动服务
redis-cli //进入交互界面
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网站备份脚本]]></title>
        <id>https://qianmianyao.github.io/post/26/</id>
        <link href="https://qianmianyao.github.io/post/26/">
        </link>
        <updated>2020-05-16T10:36:43.000Z</updated>
        <summary type="html"><![CDATA[<p>备份是通过又拍云的官方工具UPX定时上传到又拍云的对象储存中的，使用这个脚本需要先安装UPX和expect，后者用来自动登陆</p>
]]></summary>
        <content type="html"><![CDATA[<p>备份是通过又拍云的官方工具UPX定时上传到又拍云的对象储存中的，使用这个脚本需要先安装UPX和expect，后者用来自动登陆</p>
<!-- more -->
<h3 id="脚本内容">脚本内容</h3>
<p>所有send字段的passwd和user修改成自己的用户名和密码</p>
<pre><code class="language-bash">#!/usr/bin/expect -f
set timeout 30
spawn sudo tar -czPf /home/qianmianyao/qianmianyao.cn.tar.gz /home/wwwroot/qianmianyao.cn #自己修改压缩文件名
expect &quot;*user:&quot;
send &quot;passwd\\r&quot;

mysqldump -uuser -ppasswd database&gt;database.sql

set timeout 30
spawn upx login
expect &quot;ServiceName:&quot;
send &quot;user\\r&quot;
expect &quot;Operator:&quot;
send &quot;user\\r&quot;
expect &quot;Password:&quot;
send &quot;passwd&quot;

upx rm qianmianyao.cn.tar.gz #修改成自己的压缩文件名，下面一样
upx rm wp.sql
upx put qianmianyao.cn.tar.gz
upx put wp.sql
</code></pre>
<h3 id="结语">结语</h3>
<p>利用expect和upx自动登陆，然后知道上传文件，实现备份，不想用upx也可以直接用又拍云提供的ftp，实现效果也是一样的。</p>
<p><a href="https://github.com/upyun/upx">UPX</a></p>
]]></content>
    </entry>
</feed>